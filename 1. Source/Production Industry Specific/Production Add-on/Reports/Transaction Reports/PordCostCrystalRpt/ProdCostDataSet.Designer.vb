'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ProdCostDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ProdCostDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableProduction_Cost_Report As Production_Cost_ReportDataTable
    
    Private tableProduction_Cost_Matrl_Report As Production_Cost_Matrl_ReportDataTable
    
    Private tableProduction_Cost_Tool_Report As Production_Cost_Tool_ReportDataTable
    
    Private tableProduction_Cost_FxdCst_Report As Production_Cost_FxdCst_ReportDataTable
    
    Private tableProduction_Cost_ManPow_Report As Production_Cost_ManPow_ReportDataTable
    
    Private tableProduction_Cost_Mach_Report As Production_Cost_Mach_ReportDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Production_Cost_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_ReportDataTable(ds.Tables("Production_Cost_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_Matrl_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_Matrl_ReportDataTable(ds.Tables("Production_Cost_Matrl_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_Tool_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_Tool_ReportDataTable(ds.Tables("Production_Cost_Tool_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_FxdCst_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_FxdCst_ReportDataTable(ds.Tables("Production_Cost_FxdCst_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_ManPow_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_ManPow_ReportDataTable(ds.Tables("Production_Cost_ManPow_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_Mach_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_Mach_ReportDataTable(ds.Tables("Production_Cost_Mach_Report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Production_Cost_Report() As Production_Cost_ReportDataTable
        Get
            Return Me.tableProduction_Cost_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Production_Cost_Matrl_Report() As Production_Cost_Matrl_ReportDataTable
        Get
            Return Me.tableProduction_Cost_Matrl_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Production_Cost_Tool_Report() As Production_Cost_Tool_ReportDataTable
        Get
            Return Me.tableProduction_Cost_Tool_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Production_Cost_FxdCst_Report() As Production_Cost_FxdCst_ReportDataTable
        Get
            Return Me.tableProduction_Cost_FxdCst_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Production_Cost_ManPow_Report() As Production_Cost_ManPow_ReportDataTable
        Get
            Return Me.tableProduction_Cost_ManPow_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Production_Cost_Mach_Report() As Production_Cost_Mach_ReportDataTable
        Get
            Return Me.tableProduction_Cost_Mach_Report
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ProdCostDataSet = CType(MyBase.Clone,ProdCostDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Production_Cost_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_ReportDataTable(ds.Tables("Production_Cost_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_Matrl_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_Matrl_ReportDataTable(ds.Tables("Production_Cost_Matrl_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_Tool_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_Tool_ReportDataTable(ds.Tables("Production_Cost_Tool_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_FxdCst_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_FxdCst_ReportDataTable(ds.Tables("Production_Cost_FxdCst_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_ManPow_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_ManPow_ReportDataTable(ds.Tables("Production_Cost_ManPow_Report")))
            End If
            If (Not (ds.Tables("Production_Cost_Mach_Report")) Is Nothing) Then
                MyBase.Tables.Add(New Production_Cost_Mach_ReportDataTable(ds.Tables("Production_Cost_Mach_Report")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProduction_Cost_Report = CType(MyBase.Tables("Production_Cost_Report"),Production_Cost_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduction_Cost_Report) Is Nothing) Then
                Me.tableProduction_Cost_Report.InitVars
            End If
        End If
        Me.tableProduction_Cost_Matrl_Report = CType(MyBase.Tables("Production_Cost_Matrl_Report"),Production_Cost_Matrl_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduction_Cost_Matrl_Report) Is Nothing) Then
                Me.tableProduction_Cost_Matrl_Report.InitVars
            End If
        End If
        Me.tableProduction_Cost_Tool_Report = CType(MyBase.Tables("Production_Cost_Tool_Report"),Production_Cost_Tool_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduction_Cost_Tool_Report) Is Nothing) Then
                Me.tableProduction_Cost_Tool_Report.InitVars
            End If
        End If
        Me.tableProduction_Cost_FxdCst_Report = CType(MyBase.Tables("Production_Cost_FxdCst_Report"),Production_Cost_FxdCst_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduction_Cost_FxdCst_Report) Is Nothing) Then
                Me.tableProduction_Cost_FxdCst_Report.InitVars
            End If
        End If
        Me.tableProduction_Cost_ManPow_Report = CType(MyBase.Tables("Production_Cost_ManPow_Report"),Production_Cost_ManPow_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduction_Cost_ManPow_Report) Is Nothing) Then
                Me.tableProduction_Cost_ManPow_Report.InitVars
            End If
        End If
        Me.tableProduction_Cost_Mach_Report = CType(MyBase.Tables("Production_Cost_Mach_Report"),Production_Cost_Mach_ReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduction_Cost_Mach_Report) Is Nothing) Then
                Me.tableProduction_Cost_Mach_Report.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ProdCostDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProdCostDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProduction_Cost_Report = New Production_Cost_ReportDataTable
        MyBase.Tables.Add(Me.tableProduction_Cost_Report)
        Me.tableProduction_Cost_Matrl_Report = New Production_Cost_Matrl_ReportDataTable
        MyBase.Tables.Add(Me.tableProduction_Cost_Matrl_Report)
        Me.tableProduction_Cost_Tool_Report = New Production_Cost_Tool_ReportDataTable
        MyBase.Tables.Add(Me.tableProduction_Cost_Tool_Report)
        Me.tableProduction_Cost_FxdCst_Report = New Production_Cost_FxdCst_ReportDataTable
        MyBase.Tables.Add(Me.tableProduction_Cost_FxdCst_Report)
        Me.tableProduction_Cost_ManPow_Report = New Production_Cost_ManPow_ReportDataTable
        MyBase.Tables.Add(Me.tableProduction_Cost_ManPow_Report)
        Me.tableProduction_Cost_Mach_Report = New Production_Cost_Mach_ReportDataTable
        MyBase.Tables.Add(Me.tableProduction_Cost_Mach_Report)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduction_Cost_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduction_Cost_Matrl_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduction_Cost_Tool_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduction_Cost_FxdCst_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduction_Cost_ManPow_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProduction_Cost_Mach_Report() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ProdCostDataSet = New ProdCostDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Production_Cost_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Production_Cost_ReportRowChangeEvent)
    
    Public Delegate Sub Production_Cost_Matrl_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Production_Cost_Matrl_ReportRowChangeEvent)
    
    Public Delegate Sub Production_Cost_Tool_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Production_Cost_Tool_ReportRowChangeEvent)
    
    Public Delegate Sub Production_Cost_FxdCst_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Production_Cost_FxdCst_ReportRowChangeEvent)
    
    Public Delegate Sub Production_Cost_ManPow_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Production_Cost_ManPow_ReportRowChangeEvent)
    
    Public Delegate Sub Production_Cost_Mach_ReportRowChangeEventHandler(ByVal sender As Object, ByVal e As Production_Cost_Mach_ReportRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Production_Cost_ReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocnum As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnPostDate As Global.System.Data.DataColumn
        
        Private columnDueDate As Global.System.Data.DataColumn
        
        Private columnPlannedQty As Global.System.Data.DataColumn
        
        Private columnCmpltQty As Global.System.Data.DataColumn
        
        Private columnRjctQty As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Production_Cost_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocnumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocnum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlannedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlannedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmpltQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmpltQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RjctQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRjctQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Production_Cost_ReportRow
            Get
                Return CType(Me.Rows(index),Production_Cost_ReportRow)
            End Get
        End Property
        
        Public Event Production_Cost_ReportRowChanging As Production_Cost_ReportRowChangeEventHandler
        
        Public Event Production_Cost_ReportRowChanged As Production_Cost_ReportRowChangeEventHandler
        
        Public Event Production_Cost_ReportRowDeleting As Production_Cost_ReportRowChangeEventHandler
        
        Public Event Production_Cost_ReportRowDeleted As Production_Cost_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduction_Cost_ReportRow(ByVal row As Production_Cost_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduction_Cost_ReportRow(ByVal Docnum As Integer, ByVal ItemCode As String, ByVal ItemName As String, ByVal Status As String, ByVal PostDate As Date, ByVal DueDate As Date, ByVal PlannedQty As Decimal, ByVal CmpltQty As Decimal, ByVal RjctQty As Decimal) As Production_Cost_ReportRow
            Dim rowProduction_Cost_ReportRow As Production_Cost_ReportRow = CType(Me.NewRow,Production_Cost_ReportRow)
            Dim columnValuesArray() As Object = New Object() {Docnum, ItemCode, ItemName, Status, PostDate, DueDate, PlannedQty, CmpltQty, RjctQty}
            rowProduction_Cost_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduction_Cost_ReportRow)
            Return rowProduction_Cost_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Production_Cost_ReportDataTable = CType(MyBase.Clone,Production_Cost_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Production_Cost_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocnum = MyBase.Columns("Docnum")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnPostDate = MyBase.Columns("PostDate")
            Me.columnDueDate = MyBase.Columns("DueDate")
            Me.columnPlannedQty = MyBase.Columns("PlannedQty")
            Me.columnCmpltQty = MyBase.Columns("CmpltQty")
            Me.columnRjctQty = MyBase.Columns("RjctQty")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocnum = New Global.System.Data.DataColumn("Docnum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocnum)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnPostDate = New Global.System.Data.DataColumn("PostDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostDate)
            Me.columnDueDate = New Global.System.Data.DataColumn("DueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDueDate)
            Me.columnPlannedQty = New Global.System.Data.DataColumn("PlannedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlannedQty)
            Me.columnCmpltQty = New Global.System.Data.DataColumn("CmpltQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmpltQty)
            Me.columnRjctQty = New Global.System.Data.DataColumn("RjctQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRjctQty)
            Me.columnDocnum.AllowDBNull = false
            Me.columnItemCode.MaxLength = 20
            Me.columnItemName.MaxLength = 100
            Me.columnStatus.ReadOnly = true
            Me.columnStatus.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduction_Cost_ReportRow() As Production_Cost_ReportRow
            Return CType(Me.NewRow,Production_Cost_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Production_Cost_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Production_Cost_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Production_Cost_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ReportRowChanged(Me, New Production_Cost_ReportRowChangeEvent(CType(e.Row,Production_Cost_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Production_Cost_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ReportRowChanging(Me, New Production_Cost_ReportRowChangeEvent(CType(e.Row,Production_Cost_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Production_Cost_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ReportRowDeleted(Me, New Production_Cost_ReportRowChangeEvent(CType(e.Row,Production_Cost_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Production_Cost_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ReportRowDeleting(Me, New Production_Cost_ReportRowChangeEvent(CType(e.Row,Production_Cost_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduction_Cost_ReportRow(ByVal row As Production_Cost_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProdCostDataSet = New ProdCostDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Production_Cost_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Production_Cost_Matrl_ReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnPlannedQty As Global.System.Data.DataColumn
        
        Private columnMtrlPlanVal As Global.System.Data.DataColumn
        
        Private columnIssuedQty As Global.System.Data.DataColumn
        
        Private columnMtrlActVal As Global.System.Data.DataColumn
        
        Private columnMtrlVarQty As Global.System.Data.DataColumn
        
        Private columnMtrlVarVal As Global.System.Data.DataColumn
        
        Private columnMtrlVarValP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Production_Cost_Matrl_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlannedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlannedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MtrlPlanValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMtrlPlanVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IssuedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssuedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MtrlActValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMtrlActVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MtrlVarQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMtrlVarQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MtrlVarValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMtrlVarVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MtrlVarValPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMtrlVarValP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Production_Cost_Matrl_ReportRow
            Get
                Return CType(Me.Rows(index),Production_Cost_Matrl_ReportRow)
            End Get
        End Property
        
        Public Event Production_Cost_Matrl_ReportRowChanging As Production_Cost_Matrl_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Matrl_ReportRowChanged As Production_Cost_Matrl_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Matrl_ReportRowDeleting As Production_Cost_Matrl_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Matrl_ReportRowDeleted As Production_Cost_Matrl_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduction_Cost_Matrl_ReportRow(ByVal row As Production_Cost_Matrl_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduction_Cost_Matrl_ReportRow(ByVal DocNum As Integer, ByVal ItemCode As String, ByVal PlannedQty As Decimal, ByVal MtrlPlanVal As Decimal, ByVal IssuedQty As Decimal, ByVal MtrlActVal As Decimal, ByVal MtrlVarQty As Decimal, ByVal MtrlVarVal As Decimal, ByVal MtrlVarValP As Decimal) As Production_Cost_Matrl_ReportRow
            Dim rowProduction_Cost_Matrl_ReportRow As Production_Cost_Matrl_ReportRow = CType(Me.NewRow,Production_Cost_Matrl_ReportRow)
            Dim columnValuesArray() As Object = New Object() {DocNum, ItemCode, PlannedQty, MtrlPlanVal, IssuedQty, MtrlActVal, MtrlVarQty, MtrlVarVal, MtrlVarValP}
            rowProduction_Cost_Matrl_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduction_Cost_Matrl_ReportRow)
            Return rowProduction_Cost_Matrl_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Production_Cost_Matrl_ReportDataTable = CType(MyBase.Clone,Production_Cost_Matrl_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Production_Cost_Matrl_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnPlannedQty = MyBase.Columns("PlannedQty")
            Me.columnMtrlPlanVal = MyBase.Columns("MtrlPlanVal")
            Me.columnIssuedQty = MyBase.Columns("IssuedQty")
            Me.columnMtrlActVal = MyBase.Columns("MtrlActVal")
            Me.columnMtrlVarQty = MyBase.Columns("MtrlVarQty")
            Me.columnMtrlVarVal = MyBase.Columns("MtrlVarVal")
            Me.columnMtrlVarValP = MyBase.Columns("MtrlVarValP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnPlannedQty = New Global.System.Data.DataColumn("PlannedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlannedQty)
            Me.columnMtrlPlanVal = New Global.System.Data.DataColumn("MtrlPlanVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMtrlPlanVal)
            Me.columnIssuedQty = New Global.System.Data.DataColumn("IssuedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssuedQty)
            Me.columnMtrlActVal = New Global.System.Data.DataColumn("MtrlActVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMtrlActVal)
            Me.columnMtrlVarQty = New Global.System.Data.DataColumn("MtrlVarQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMtrlVarQty)
            Me.columnMtrlVarVal = New Global.System.Data.DataColumn("MtrlVarVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMtrlVarVal)
            Me.columnMtrlVarValP = New Global.System.Data.DataColumn("MtrlVarValP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMtrlVarValP)
            Me.columnDocNum.AllowDBNull = false
            Me.columnItemCode.ReadOnly = true
            Me.columnItemCode.MaxLength = 121
            Me.columnMtrlPlanVal.ReadOnly = true
            Me.columnMtrlActVal.ReadOnly = true
            Me.columnMtrlVarQty.ReadOnly = true
            Me.columnMtrlVarVal.ReadOnly = true
            Me.columnMtrlVarValP.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduction_Cost_Matrl_ReportRow() As Production_Cost_Matrl_ReportRow
            Return CType(Me.NewRow,Production_Cost_Matrl_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Production_Cost_Matrl_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Production_Cost_Matrl_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Production_Cost_Matrl_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Matrl_ReportRowChanged(Me, New Production_Cost_Matrl_ReportRowChangeEvent(CType(e.Row,Production_Cost_Matrl_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Production_Cost_Matrl_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Matrl_ReportRowChanging(Me, New Production_Cost_Matrl_ReportRowChangeEvent(CType(e.Row,Production_Cost_Matrl_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Production_Cost_Matrl_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Matrl_ReportRowDeleted(Me, New Production_Cost_Matrl_ReportRowChangeEvent(CType(e.Row,Production_Cost_Matrl_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Production_Cost_Matrl_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Matrl_ReportRowDeleting(Me, New Production_Cost_Matrl_ReportRowChangeEvent(CType(e.Row,Production_Cost_Matrl_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduction_Cost_Matrl_ReportRow(ByVal row As Production_Cost_Matrl_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProdCostDataSet = New ProdCostDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Production_Cost_Matrl_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Production_Cost_Tool_ReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnTools As Global.System.Data.DataColumn
        
        Private columnU_Planqty As Global.System.Data.DataColumn
        
        Private columnTLPlnVal As Global.System.Data.DataColumn
        
        Private columnU_Qty As Global.System.Data.DataColumn
        
        Private columnU_TotCost As Global.System.Data.DataColumn
        
        Private columnTLVarStrk As Global.System.Data.DataColumn
        
        Private columnTLVarVal As Global.System.Data.DataColumn
        
        Private columnTLVarValP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Production_Cost_Tool_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToolsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTools
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_PlanqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Planqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLPlnValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLPlnVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_TotCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_TotCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLVarStrkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLVarStrk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLVarValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLVarVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLVarValPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLVarValP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Production_Cost_Tool_ReportRow
            Get
                Return CType(Me.Rows(index),Production_Cost_Tool_ReportRow)
            End Get
        End Property
        
        Public Event Production_Cost_Tool_ReportRowChanging As Production_Cost_Tool_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Tool_ReportRowChanged As Production_Cost_Tool_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Tool_ReportRowDeleting As Production_Cost_Tool_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Tool_ReportRowDeleted As Production_Cost_Tool_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduction_Cost_Tool_ReportRow(ByVal row As Production_Cost_Tool_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduction_Cost_Tool_ReportRow(ByVal DocNum As Integer, ByVal Tools As String, ByVal U_Planqty As Decimal, ByVal TLPlnVal As Decimal, ByVal U_Qty As Decimal, ByVal U_TotCost As Decimal, ByVal TLVarStrk As Decimal, ByVal TLVarVal As Decimal, ByVal TLVarValP As Decimal) As Production_Cost_Tool_ReportRow
            Dim rowProduction_Cost_Tool_ReportRow As Production_Cost_Tool_ReportRow = CType(Me.NewRow,Production_Cost_Tool_ReportRow)
            Dim columnValuesArray() As Object = New Object() {DocNum, Tools, U_Planqty, TLPlnVal, U_Qty, U_TotCost, TLVarStrk, TLVarVal, TLVarValP}
            rowProduction_Cost_Tool_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduction_Cost_Tool_ReportRow)
            Return rowProduction_Cost_Tool_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Production_Cost_Tool_ReportDataTable = CType(MyBase.Clone,Production_Cost_Tool_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Production_Cost_Tool_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnTools = MyBase.Columns("Tools")
            Me.columnU_Planqty = MyBase.Columns("U_Planqty")
            Me.columnTLPlnVal = MyBase.Columns("TLPlnVal")
            Me.columnU_Qty = MyBase.Columns("U_Qty")
            Me.columnU_TotCost = MyBase.Columns("U_TotCost")
            Me.columnTLVarStrk = MyBase.Columns("TLVarStrk")
            Me.columnTLVarVal = MyBase.Columns("TLVarVal")
            Me.columnTLVarValP = MyBase.Columns("TLVarValP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnTools = New Global.System.Data.DataColumn("Tools", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTools)
            Me.columnU_Planqty = New Global.System.Data.DataColumn("U_Planqty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Planqty)
            Me.columnTLPlnVal = New Global.System.Data.DataColumn("TLPlnVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLPlnVal)
            Me.columnU_Qty = New Global.System.Data.DataColumn("U_Qty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Qty)
            Me.columnU_TotCost = New Global.System.Data.DataColumn("U_TotCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_TotCost)
            Me.columnTLVarStrk = New Global.System.Data.DataColumn("TLVarStrk", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLVarStrk)
            Me.columnTLVarVal = New Global.System.Data.DataColumn("TLVarVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLVarVal)
            Me.columnTLVarValP = New Global.System.Data.DataColumn("TLVarValP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLVarValP)
            Me.columnDocNum.AllowDBNull = false
            Me.columnTools.ReadOnly = true
            Me.columnTools.MaxLength = 46
            Me.columnTLPlnVal.ReadOnly = true
            Me.columnTLVarStrk.ReadOnly = true
            Me.columnTLVarVal.ReadOnly = true
            Me.columnTLVarValP.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduction_Cost_Tool_ReportRow() As Production_Cost_Tool_ReportRow
            Return CType(Me.NewRow,Production_Cost_Tool_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Production_Cost_Tool_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Production_Cost_Tool_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Production_Cost_Tool_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Tool_ReportRowChanged(Me, New Production_Cost_Tool_ReportRowChangeEvent(CType(e.Row,Production_Cost_Tool_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Production_Cost_Tool_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Tool_ReportRowChanging(Me, New Production_Cost_Tool_ReportRowChangeEvent(CType(e.Row,Production_Cost_Tool_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Production_Cost_Tool_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Tool_ReportRowDeleted(Me, New Production_Cost_Tool_ReportRowChangeEvent(CType(e.Row,Production_Cost_Tool_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Production_Cost_Tool_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Tool_ReportRowDeleting(Me, New Production_Cost_Tool_ReportRowChangeEvent(CType(e.Row,Production_Cost_Tool_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduction_Cost_Tool_ReportRow(ByVal row As Production_Cost_Tool_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProdCostDataSet = New ProdCostDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Production_Cost_Tool_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Production_Cost_FxdCst_ReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnU_FCost As Global.System.Data.DataColumn
        
        Private columnFxdPlnVal As Global.System.Data.DataColumn
        
        Private columnFxdActVal As Global.System.Data.DataColumn
        
        Private columnFxdVarVal As Global.System.Data.DataColumn
        
        Private columnFxdVarValP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Production_Cost_FxdCst_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_FCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_FCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FxdPlnValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFxdPlnVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FxdActValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFxdActVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FxdVarValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFxdVarVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FxdVarValPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFxdVarValP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Production_Cost_FxdCst_ReportRow
            Get
                Return CType(Me.Rows(index),Production_Cost_FxdCst_ReportRow)
            End Get
        End Property
        
        Public Event Production_Cost_FxdCst_ReportRowChanging As Production_Cost_FxdCst_ReportRowChangeEventHandler
        
        Public Event Production_Cost_FxdCst_ReportRowChanged As Production_Cost_FxdCst_ReportRowChangeEventHandler
        
        Public Event Production_Cost_FxdCst_ReportRowDeleting As Production_Cost_FxdCst_ReportRowChangeEventHandler
        
        Public Event Production_Cost_FxdCst_ReportRowDeleted As Production_Cost_FxdCst_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduction_Cost_FxdCst_ReportRow(ByVal row As Production_Cost_FxdCst_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduction_Cost_FxdCst_ReportRow(ByVal DocNum As Integer, ByVal U_FCost As String, ByVal FxdPlnVal As Decimal, ByVal FxdActVal As Decimal, ByVal FxdVarVal As Decimal, ByVal FxdVarValP As Decimal) As Production_Cost_FxdCst_ReportRow
            Dim rowProduction_Cost_FxdCst_ReportRow As Production_Cost_FxdCst_ReportRow = CType(Me.NewRow,Production_Cost_FxdCst_ReportRow)
            Dim columnValuesArray() As Object = New Object() {DocNum, U_FCost, FxdPlnVal, FxdActVal, FxdVarVal, FxdVarValP}
            rowProduction_Cost_FxdCst_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduction_Cost_FxdCst_ReportRow)
            Return rowProduction_Cost_FxdCst_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Production_Cost_FxdCst_ReportDataTable = CType(MyBase.Clone,Production_Cost_FxdCst_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Production_Cost_FxdCst_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnU_FCost = MyBase.Columns("U_FCost")
            Me.columnFxdPlnVal = MyBase.Columns("FxdPlnVal")
            Me.columnFxdActVal = MyBase.Columns("FxdActVal")
            Me.columnFxdVarVal = MyBase.Columns("FxdVarVal")
            Me.columnFxdVarValP = MyBase.Columns("FxdVarValP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnU_FCost = New Global.System.Data.DataColumn("U_FCost", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_FCost)
            Me.columnFxdPlnVal = New Global.System.Data.DataColumn("FxdPlnVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFxdPlnVal)
            Me.columnFxdActVal = New Global.System.Data.DataColumn("FxdActVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFxdActVal)
            Me.columnFxdVarVal = New Global.System.Data.DataColumn("FxdVarVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFxdVarVal)
            Me.columnFxdVarValP = New Global.System.Data.DataColumn("FxdVarValP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFxdVarValP)
            Me.columnDocNum.AllowDBNull = false
            Me.columnU_FCost.MaxLength = 30
            Me.columnFxdPlnVal.ReadOnly = true
            Me.columnFxdActVal.ReadOnly = true
            Me.columnFxdVarVal.ReadOnly = true
            Me.columnFxdVarValP.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduction_Cost_FxdCst_ReportRow() As Production_Cost_FxdCst_ReportRow
            Return CType(Me.NewRow,Production_Cost_FxdCst_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Production_Cost_FxdCst_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Production_Cost_FxdCst_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Production_Cost_FxdCst_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_FxdCst_ReportRowChanged(Me, New Production_Cost_FxdCst_ReportRowChangeEvent(CType(e.Row,Production_Cost_FxdCst_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Production_Cost_FxdCst_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_FxdCst_ReportRowChanging(Me, New Production_Cost_FxdCst_ReportRowChangeEvent(CType(e.Row,Production_Cost_FxdCst_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Production_Cost_FxdCst_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_FxdCst_ReportRowDeleted(Me, New Production_Cost_FxdCst_ReportRowChangeEvent(CType(e.Row,Production_Cost_FxdCst_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Production_Cost_FxdCst_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_FxdCst_ReportRowDeleting(Me, New Production_Cost_FxdCst_ReportRowChangeEvent(CType(e.Row,Production_Cost_FxdCst_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduction_Cost_FxdCst_ReportRow(ByVal row As Production_Cost_FxdCst_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProdCostDataSet = New ProdCostDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Production_Cost_FxdCst_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Production_Cost_ManPow_ReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnEmp As Global.System.Data.DataColumn
        
        Private columnMPPlnTime As Global.System.Data.DataColumn
        
        Private columnMPPlnVal As Global.System.Data.DataColumn
        
        Private columnU_WrkTime As Global.System.Data.DataColumn
        
        Private columnU_Totcost As Global.System.Data.DataColumn
        
        Private columnMPVarTime As Global.System.Data.DataColumn
        
        Private columnMPVarVal As Global.System.Data.DataColumn
        
        Private columnMPVarValP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Production_Cost_ManPow_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPPlnTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPPlnTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPPlnValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPPlnVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_WrkTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_WrkTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_TotcostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Totcost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPVarTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPVarTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPVarValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPVarVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPVarValPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPVarValP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Production_Cost_ManPow_ReportRow
            Get
                Return CType(Me.Rows(index),Production_Cost_ManPow_ReportRow)
            End Get
        End Property
        
        Public Event Production_Cost_ManPow_ReportRowChanging As Production_Cost_ManPow_ReportRowChangeEventHandler
        
        Public Event Production_Cost_ManPow_ReportRowChanged As Production_Cost_ManPow_ReportRowChangeEventHandler
        
        Public Event Production_Cost_ManPow_ReportRowDeleting As Production_Cost_ManPow_ReportRowChangeEventHandler
        
        Public Event Production_Cost_ManPow_ReportRowDeleted As Production_Cost_ManPow_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduction_Cost_ManPow_ReportRow(ByVal row As Production_Cost_ManPow_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduction_Cost_ManPow_ReportRow(ByVal DocNum As Integer, ByVal Emp As String, ByVal MPPlnTime As Short, ByVal MPPlnVal As Decimal, ByVal U_WrkTime As Short, ByVal U_Totcost As Decimal, ByVal MPVarTime As Short, ByVal MPVarVal As Decimal, ByVal MPVarValP As Decimal) As Production_Cost_ManPow_ReportRow
            Dim rowProduction_Cost_ManPow_ReportRow As Production_Cost_ManPow_ReportRow = CType(Me.NewRow,Production_Cost_ManPow_ReportRow)
            Dim columnValuesArray() As Object = New Object() {DocNum, Emp, MPPlnTime, MPPlnVal, U_WrkTime, U_Totcost, MPVarTime, MPVarVal, MPVarValP}
            rowProduction_Cost_ManPow_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduction_Cost_ManPow_ReportRow)
            Return rowProduction_Cost_ManPow_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Production_Cost_ManPow_ReportDataTable = CType(MyBase.Clone,Production_Cost_ManPow_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Production_Cost_ManPow_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnEmp = MyBase.Columns("Emp")
            Me.columnMPPlnTime = MyBase.Columns("MPPlnTime")
            Me.columnMPPlnVal = MyBase.Columns("MPPlnVal")
            Me.columnU_WrkTime = MyBase.Columns("U_WrkTime")
            Me.columnU_Totcost = MyBase.Columns("U_Totcost")
            Me.columnMPVarTime = MyBase.Columns("MPVarTime")
            Me.columnMPVarVal = MyBase.Columns("MPVarVal")
            Me.columnMPVarValP = MyBase.Columns("MPVarValP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnEmp = New Global.System.Data.DataColumn("Emp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmp)
            Me.columnMPPlnTime = New Global.System.Data.DataColumn("MPPlnTime", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPPlnTime)
            Me.columnMPPlnVal = New Global.System.Data.DataColumn("MPPlnVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPPlnVal)
            Me.columnU_WrkTime = New Global.System.Data.DataColumn("U_WrkTime", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_WrkTime)
            Me.columnU_Totcost = New Global.System.Data.DataColumn("U_Totcost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Totcost)
            Me.columnMPVarTime = New Global.System.Data.DataColumn("MPVarTime", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPVarTime)
            Me.columnMPVarVal = New Global.System.Data.DataColumn("MPVarVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPVarVal)
            Me.columnMPVarValP = New Global.System.Data.DataColumn("MPVarValP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPVarValP)
            Me.columnDocNum.AllowDBNull = false
            Me.columnEmp.ReadOnly = true
            Me.columnEmp.MaxLength = 81
            Me.columnMPPlnTime.ReadOnly = true
            Me.columnMPPlnVal.ReadOnly = true
            Me.columnMPVarTime.ReadOnly = true
            Me.columnMPVarVal.ReadOnly = true
            Me.columnMPVarValP.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduction_Cost_ManPow_ReportRow() As Production_Cost_ManPow_ReportRow
            Return CType(Me.NewRow,Production_Cost_ManPow_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Production_Cost_ManPow_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Production_Cost_ManPow_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Production_Cost_ManPow_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ManPow_ReportRowChanged(Me, New Production_Cost_ManPow_ReportRowChangeEvent(CType(e.Row,Production_Cost_ManPow_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Production_Cost_ManPow_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ManPow_ReportRowChanging(Me, New Production_Cost_ManPow_ReportRowChangeEvent(CType(e.Row,Production_Cost_ManPow_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Production_Cost_ManPow_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ManPow_ReportRowDeleted(Me, New Production_Cost_ManPow_ReportRowChangeEvent(CType(e.Row,Production_Cost_ManPow_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Production_Cost_ManPow_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_ManPow_ReportRowDeleting(Me, New Production_Cost_ManPow_ReportRowChangeEvent(CType(e.Row,Production_Cost_ManPow_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduction_Cost_ManPow_ReportRow(ByVal row As Production_Cost_ManPow_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProdCostDataSet = New ProdCostDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Production_Cost_ManPow_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Production_Cost_Mach_ReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDocNum As Global.System.Data.DataColumn
        
        Private columnMach As Global.System.Data.DataColumn
        
        Private columnMachPlnTime As Global.System.Data.DataColumn
        
        Private columnMachPlnVal As Global.System.Data.DataColumn
        
        Private columnU_Rntime As Global.System.Data.DataColumn
        
        Private columnU_Qty As Global.System.Data.DataColumn
        
        Private columnMachVarTime As Global.System.Data.DataColumn
        
        Private columnMachVarVal As Global.System.Data.DataColumn
        
        Private columnMachVarValP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Production_Cost_Mach_Report"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMach
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachPlnTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachPlnTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachPlnValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachPlnVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_RntimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Rntime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachVarTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachVarTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachVarValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachVarVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachVarValPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachVarValP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Production_Cost_Mach_ReportRow
            Get
                Return CType(Me.Rows(index),Production_Cost_Mach_ReportRow)
            End Get
        End Property
        
        Public Event Production_Cost_Mach_ReportRowChanging As Production_Cost_Mach_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Mach_ReportRowChanged As Production_Cost_Mach_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Mach_ReportRowDeleting As Production_Cost_Mach_ReportRowChangeEventHandler
        
        Public Event Production_Cost_Mach_ReportRowDeleted As Production_Cost_Mach_ReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProduction_Cost_Mach_ReportRow(ByVal row As Production_Cost_Mach_ReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProduction_Cost_Mach_ReportRow(ByVal DocNum As Integer, ByVal Mach As String, ByVal MachPlnTime As Short, ByVal MachPlnVal As Decimal, ByVal U_Rntime As Short, ByVal U_Qty As Decimal, ByVal MachVarTime As Short, ByVal MachVarVal As Decimal, ByVal MachVarValP As Decimal) As Production_Cost_Mach_ReportRow
            Dim rowProduction_Cost_Mach_ReportRow As Production_Cost_Mach_ReportRow = CType(Me.NewRow,Production_Cost_Mach_ReportRow)
            Dim columnValuesArray() As Object = New Object() {DocNum, Mach, MachPlnTime, MachPlnVal, U_Rntime, U_Qty, MachVarTime, MachVarVal, MachVarValP}
            rowProduction_Cost_Mach_ReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProduction_Cost_Mach_ReportRow)
            Return rowProduction_Cost_Mach_ReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Production_Cost_Mach_ReportDataTable = CType(MyBase.Clone,Production_Cost_Mach_ReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Production_Cost_Mach_ReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDocNum = MyBase.Columns("DocNum")
            Me.columnMach = MyBase.Columns("Mach")
            Me.columnMachPlnTime = MyBase.Columns("MachPlnTime")
            Me.columnMachPlnVal = MyBase.Columns("MachPlnVal")
            Me.columnU_Rntime = MyBase.Columns("U_Rntime")
            Me.columnU_Qty = MyBase.Columns("U_Qty")
            Me.columnMachVarTime = MyBase.Columns("MachVarTime")
            Me.columnMachVarVal = MyBase.Columns("MachVarVal")
            Me.columnMachVarValP = MyBase.Columns("MachVarValP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDocNum = New Global.System.Data.DataColumn("DocNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocNum)
            Me.columnMach = New Global.System.Data.DataColumn("Mach", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMach)
            Me.columnMachPlnTime = New Global.System.Data.DataColumn("MachPlnTime", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachPlnTime)
            Me.columnMachPlnVal = New Global.System.Data.DataColumn("MachPlnVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachPlnVal)
            Me.columnU_Rntime = New Global.System.Data.DataColumn("U_Rntime", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Rntime)
            Me.columnU_Qty = New Global.System.Data.DataColumn("U_Qty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Qty)
            Me.columnMachVarTime = New Global.System.Data.DataColumn("MachVarTime", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachVarTime)
            Me.columnMachVarVal = New Global.System.Data.DataColumn("MachVarVal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachVarVal)
            Me.columnMachVarValP = New Global.System.Data.DataColumn("MachVarValP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachVarValP)
            Me.columnDocNum.AllowDBNull = false
            Me.columnMach.ReadOnly = true
            Me.columnMach.MaxLength = 61
            Me.columnMachPlnTime.ReadOnly = true
            Me.columnMachPlnVal.ReadOnly = true
            Me.columnMachVarTime.ReadOnly = true
            Me.columnMachVarVal.ReadOnly = true
            Me.columnMachVarValP.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProduction_Cost_Mach_ReportRow() As Production_Cost_Mach_ReportRow
            Return CType(Me.NewRow,Production_Cost_Mach_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Production_Cost_Mach_ReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Production_Cost_Mach_ReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Production_Cost_Mach_ReportRowChangedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Mach_ReportRowChanged(Me, New Production_Cost_Mach_ReportRowChangeEvent(CType(e.Row,Production_Cost_Mach_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Production_Cost_Mach_ReportRowChangingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Mach_ReportRowChanging(Me, New Production_Cost_Mach_ReportRowChangeEvent(CType(e.Row,Production_Cost_Mach_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Production_Cost_Mach_ReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Mach_ReportRowDeleted(Me, New Production_Cost_Mach_ReportRowChangeEvent(CType(e.Row,Production_Cost_Mach_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Production_Cost_Mach_ReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent Production_Cost_Mach_ReportRowDeleting(Me, New Production_Cost_Mach_ReportRowChangeEvent(CType(e.Row,Production_Cost_Mach_ReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProduction_Cost_Mach_ReportRow(ByVal row As Production_Cost_Mach_ReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProdCostDataSet = New ProdCostDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Production_Cost_Mach_ReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Production_Cost_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduction_Cost_Report As Production_Cost_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduction_Cost_Report = CType(Me.Table,Production_Cost_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Docnum() As Integer
            Get
                Return CType(Me(Me.tableProduction_Cost_Report.DocnumColumn),Integer)
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.DocnumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.PostDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostDate' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.PostDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.DueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DueDate' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.DueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlannedQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.PlannedQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PlannedQty' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.PlannedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmpltQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.CmpltQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmpltQty' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.CmpltQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RjctQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Report.RjctQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RjctQty' in table 'Production_Cost_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Report.RjctQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableProduction_Cost_Report.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tableProduction_Cost_Report.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableProduction_Cost_Report.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostDateNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.PostDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostDateNull()
            Me(Me.tableProduction_Cost_Report.PostDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDueDateNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.DueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDueDateNull()
            Me(Me.tableProduction_Cost_Report.DueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlannedQtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.PlannedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlannedQtyNull()
            Me(Me.tableProduction_Cost_Report.PlannedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmpltQtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.CmpltQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmpltQtyNull()
            Me(Me.tableProduction_Cost_Report.CmpltQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRjctQtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Report.RjctQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRjctQtyNull()
            Me(Me.tableProduction_Cost_Report.RjctQtyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Production_Cost_Matrl_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduction_Cost_Matrl_Report As Production_Cost_Matrl_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduction_Cost_Matrl_Report = CType(Me.Table,Production_Cost_Matrl_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Integer
            Get
                Return CType(Me(Me.tableProduction_Cost_Matrl_Report.DocNumColumn),Integer)
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'Production_Cost_Matrl_Report' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlannedQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.PlannedQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PlannedQty' in table 'Production_Cost_Matrl_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.PlannedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MtrlPlanVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.MtrlPlanValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MtrlPlanVal' in table 'Production_Cost_Matrl_Report' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.MtrlPlanValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IssuedQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.IssuedQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IssuedQty' in table 'Production_Cost_Matrl_Report' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.IssuedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MtrlActVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.MtrlActValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MtrlActVal' in table 'Production_Cost_Matrl_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.MtrlActValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MtrlVarQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarQtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MtrlVarQty' in table 'Production_Cost_Matrl_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MtrlVarVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MtrlVarVal' in table 'Production_Cost_Matrl_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MtrlVarValP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarValPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MtrlVarValP' in table 'Production_Cost_Matrl_Report' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarValPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tableProduction_Cost_Matrl_Report.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlannedQtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.PlannedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlannedQtyNull()
            Me(Me.tableProduction_Cost_Matrl_Report.PlannedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMtrlPlanValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.MtrlPlanValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMtrlPlanValNull()
            Me(Me.tableProduction_Cost_Matrl_Report.MtrlPlanValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIssuedQtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.IssuedQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIssuedQtyNull()
            Me(Me.tableProduction_Cost_Matrl_Report.IssuedQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMtrlActValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.MtrlActValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMtrlActValNull()
            Me(Me.tableProduction_Cost_Matrl_Report.MtrlActValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMtrlVarQtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.MtrlVarQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMtrlVarQtyNull()
            Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMtrlVarValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.MtrlVarValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMtrlVarValNull()
            Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMtrlVarValPNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Matrl_Report.MtrlVarValPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMtrlVarValPNull()
            Me(Me.tableProduction_Cost_Matrl_Report.MtrlVarValPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Production_Cost_Tool_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduction_Cost_Tool_Report As Production_Cost_Tool_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduction_Cost_Tool_Report = CType(Me.Table,Production_Cost_Tool_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Integer
            Get
                Return CType(Me(Me.tableProduction_Cost_Tool_Report.DocNumColumn),Integer)
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tools() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.ToolsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tools' in table 'Production_Cost_Tool_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.ToolsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Planqty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.U_PlanqtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_Planqty' in table 'Production_Cost_Tool_Report' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.U_PlanqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLPlnVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.TLPlnValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TLPlnVal' in table 'Production_Cost_Tool_Report' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.TLPlnValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Qty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.U_QtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_Qty' in table 'Production_Cost_Tool_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.U_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_TotCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.U_TotCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_TotCost' in table 'Production_Cost_Tool_Report' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.U_TotCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLVarStrk() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.TLVarStrkColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TLVarStrk' in table 'Production_Cost_Tool_Report' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.TLVarStrkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLVarVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.TLVarValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TLVarVal' in table 'Production_Cost_Tool_Report' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.TLVarValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLVarValP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Tool_Report.TLVarValPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TLVarValP' in table 'Production_Cost_Tool_Report' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Tool_Report.TLVarValPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToolsNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.ToolsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToolsNull()
            Me(Me.tableProduction_Cost_Tool_Report.ToolsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_PlanqtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.U_PlanqtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_PlanqtyNull()
            Me(Me.tableProduction_Cost_Tool_Report.U_PlanqtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLPlnValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.TLPlnValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLPlnValNull()
            Me(Me.tableProduction_Cost_Tool_Report.TLPlnValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_QtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.U_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_QtyNull()
            Me(Me.tableProduction_Cost_Tool_Report.U_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_TotCostNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.U_TotCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_TotCostNull()
            Me(Me.tableProduction_Cost_Tool_Report.U_TotCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLVarStrkNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.TLVarStrkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLVarStrkNull()
            Me(Me.tableProduction_Cost_Tool_Report.TLVarStrkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLVarValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.TLVarValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLVarValNull()
            Me(Me.tableProduction_Cost_Tool_Report.TLVarValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLVarValPNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Tool_Report.TLVarValPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLVarValPNull()
            Me(Me.tableProduction_Cost_Tool_Report.TLVarValPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Production_Cost_FxdCst_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduction_Cost_FxdCst_Report As Production_Cost_FxdCst_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduction_Cost_FxdCst_Report = CType(Me.Table,Production_Cost_FxdCst_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Integer
            Get
                Return CType(Me(Me.tableProduction_Cost_FxdCst_Report.DocNumColumn),Integer)
            End Get
            Set
                Me(Me.tableProduction_Cost_FxdCst_Report.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_FCost() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_FxdCst_Report.U_FCostColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_FCost' in table 'Production_Cost_FxdCst_Report' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_FxdCst_Report.U_FCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FxdPlnVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_FxdCst_Report.FxdPlnValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FxdPlnVal' in table 'Production_Cost_FxdCst_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_FxdCst_Report.FxdPlnValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FxdActVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_FxdCst_Report.FxdActValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FxdActVal' in table 'Production_Cost_FxdCst_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_FxdCst_Report.FxdActValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FxdVarVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_FxdCst_Report.FxdVarValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FxdVarVal' in table 'Production_Cost_FxdCst_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_FxdCst_Report.FxdVarValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FxdVarValP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_FxdCst_Report.FxdVarValPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FxdVarValP' in table 'Production_Cost_FxdCst_Report' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_FxdCst_Report.FxdVarValPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_FCostNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_FxdCst_Report.U_FCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_FCostNull()
            Me(Me.tableProduction_Cost_FxdCst_Report.U_FCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFxdPlnValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_FxdCst_Report.FxdPlnValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFxdPlnValNull()
            Me(Me.tableProduction_Cost_FxdCst_Report.FxdPlnValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFxdActValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_FxdCst_Report.FxdActValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFxdActValNull()
            Me(Me.tableProduction_Cost_FxdCst_Report.FxdActValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFxdVarValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_FxdCst_Report.FxdVarValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFxdVarValNull()
            Me(Me.tableProduction_Cost_FxdCst_Report.FxdVarValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFxdVarValPNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_FxdCst_Report.FxdVarValPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFxdVarValPNull()
            Me(Me.tableProduction_Cost_FxdCst_Report.FxdVarValPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Production_Cost_ManPow_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduction_Cost_ManPow_Report As Production_Cost_ManPow_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduction_Cost_ManPow_Report = CType(Me.Table,Production_Cost_ManPow_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Integer
            Get
                Return CType(Me(Me.tableProduction_Cost_ManPow_Report.DocNumColumn),Integer)
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emp() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.EmpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Emp' in table 'Production_Cost_ManPow_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.EmpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPPlnTime() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.MPPlnTimeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MPPlnTime' in table 'Production_Cost_ManPow_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.MPPlnTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPPlnVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.MPPlnValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MPPlnVal' in table 'Production_Cost_ManPow_Report' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.MPPlnValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_WrkTime() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.U_WrkTimeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_WrkTime' in table 'Production_Cost_ManPow_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.U_WrkTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Totcost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.U_TotcostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_Totcost' in table 'Production_Cost_ManPow_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.U_TotcostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPVarTime() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.MPVarTimeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MPVarTime' in table 'Production_Cost_ManPow_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.MPVarTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPVarVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.MPVarValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MPVarVal' in table 'Production_Cost_ManPow_Report' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.MPVarValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPVarValP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_ManPow_Report.MPVarValPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MPVarValP' in table 'Production_Cost_ManPow_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_ManPow_Report.MPVarValPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.EmpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpNull()
            Me(Me.tableProduction_Cost_ManPow_Report.EmpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPPlnTimeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.MPPlnTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPPlnTimeNull()
            Me(Me.tableProduction_Cost_ManPow_Report.MPPlnTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPPlnValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.MPPlnValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPPlnValNull()
            Me(Me.tableProduction_Cost_ManPow_Report.MPPlnValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_WrkTimeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.U_WrkTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_WrkTimeNull()
            Me(Me.tableProduction_Cost_ManPow_Report.U_WrkTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_TotcostNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.U_TotcostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_TotcostNull()
            Me(Me.tableProduction_Cost_ManPow_Report.U_TotcostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPVarTimeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.MPVarTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPVarTimeNull()
            Me(Me.tableProduction_Cost_ManPow_Report.MPVarTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPVarValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.MPVarValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPVarValNull()
            Me(Me.tableProduction_Cost_ManPow_Report.MPVarValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPVarValPNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_ManPow_Report.MPVarValPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPVarValPNull()
            Me(Me.tableProduction_Cost_ManPow_Report.MPVarValPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Production_Cost_Mach_ReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduction_Cost_Mach_Report As Production_Cost_Mach_ReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduction_Cost_Mach_Report = CType(Me.Table,Production_Cost_Mach_ReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocNum() As Integer
            Get
                Return CType(Me(Me.tableProduction_Cost_Mach_Report.DocNumColumn),Integer)
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.DocNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mach() As String
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.MachColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mach' in table 'Production_Cost_Mach_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.MachColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachPlnTime() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.MachPlnTimeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MachPlnTime' in table 'Production_Cost_Mach_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.MachPlnTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachPlnVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.MachPlnValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MachPlnVal' in table 'Production_Cost_Mach_Report' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.MachPlnValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Rntime() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.U_RntimeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_Rntime' in table 'Production_Cost_Mach_Report' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.U_RntimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Qty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.U_QtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'U_Qty' in table 'Production_Cost_Mach_Report' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.U_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachVarTime() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.MachVarTimeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MachVarTime' in table 'Production_Cost_Mach_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.MachVarTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachVarVal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.MachVarValColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MachVarVal' in table 'Production_Cost_Mach_Report' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.MachVarValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachVarValP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProduction_Cost_Mach_Report.MachVarValPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MachVarValP' in table 'Production_Cost_Mach_Report' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProduction_Cost_Mach_Report.MachVarValPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMachNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.MachColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMachNull()
            Me(Me.tableProduction_Cost_Mach_Report.MachColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMachPlnTimeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.MachPlnTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMachPlnTimeNull()
            Me(Me.tableProduction_Cost_Mach_Report.MachPlnTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMachPlnValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.MachPlnValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMachPlnValNull()
            Me(Me.tableProduction_Cost_Mach_Report.MachPlnValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_RntimeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.U_RntimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_RntimeNull()
            Me(Me.tableProduction_Cost_Mach_Report.U_RntimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_QtyNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.U_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_QtyNull()
            Me(Me.tableProduction_Cost_Mach_Report.U_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMachVarTimeNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.MachVarTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMachVarTimeNull()
            Me(Me.tableProduction_Cost_Mach_Report.MachVarTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMachVarValNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.MachVarValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMachVarValNull()
            Me(Me.tableProduction_Cost_Mach_Report.MachVarValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMachVarValPNull() As Boolean
            Return Me.IsNull(Me.tableProduction_Cost_Mach_Report.MachVarValPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMachVarValPNull()
            Me(Me.tableProduction_Cost_Mach_Report.MachVarValPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Production_Cost_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Production_Cost_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Production_Cost_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Production_Cost_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Production_Cost_Matrl_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Production_Cost_Matrl_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Production_Cost_Matrl_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Production_Cost_Matrl_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Production_Cost_Tool_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Production_Cost_Tool_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Production_Cost_Tool_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Production_Cost_Tool_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Production_Cost_FxdCst_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Production_Cost_FxdCst_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Production_Cost_FxdCst_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Production_Cost_FxdCst_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Production_Cost_ManPow_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Production_Cost_ManPow_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Production_Cost_ManPow_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Production_Cost_ManPow_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Production_Cost_Mach_ReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Production_Cost_Mach_ReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Production_Cost_Mach_ReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Production_Cost_Mach_ReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
